name: "Snowflake DevOps Workflow"

on:
  push:
    branches:
      - main
      - DEV  # Ensure the DEV branch is included
  pull_request:
    branches:
      - main
      - DEV  # Ensure the DEV branch is included

jobs:
  snowflake-terraform-demo:
    name: "Snowflake Terraform Demo Job"
    runs-on: ubuntu-latest
    permissions:
      issues: write  # Permission to write to issues (needed to comment)
      pull-requests: write

    env:
      # Read connection secret
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_ADVANCED_DATA_ENGINEERING_SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine working directory
        id: set-working-dir
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "Working directory is root"
            echo "::set-output name=dir::./"
          else
            echo "Working directory is dev-terraform"
            echo "::set-output name=dir::./dev-terraform/"
          fi

      

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Install Snowflake CLI GitHub Action and point to config file
      - name: Install SnowflakeCLI
        uses: snowflakedb/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: "config_1.toml"

      # Fetch latest changes from the repository to Snowflake
      - name: Fetch latest changes to Snowflake
        run: snow git fetch dev.public.Snow_Git_Integration

      # Deploy templates to the data environment -
      - name: Deploy templates to data environment
        run: |
          # Export TARGET_BRANCH for use in this step
          echo "Using branch: ${GITHUB_REF}"
          snow git execute @SNOW_GIT_INTEGRATION/branches/DEV/sql_files/.*sql \
          -D "env='${{  }}'" \
          --database=DEV \
          --schema=PUBLIC
      
